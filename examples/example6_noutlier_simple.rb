# frozen_string_literal: true

require "bundler/setup"

require "ml/experiment/preprocessor"
require "ml/forest"
require "ml/service/isolation/outlier"
require "ml/service/isolation/novelty"
require "ml/service/isolation/noutlier"
require "stats/statistics"
require "plotting/gnuplotter"
require "plotting/preprocessor"
require "plotting/graphviz"

include Plotting::Gnuplotter
include Plotting::Preprocessor
include Stats::Statistics
include Plotting::Graphviz

data = [
  86.54787791306518,246.49224431759484,"a",
  87.20026770436915,243.2484924095412,"a",
  66.84329663269556,235.44138111130093,"a",
  34.97611156245478,260.201260201897,"a",
  79.95185926801194,257.11597548745124,"a",
  94.25394890871246,228.0326135698558,"a",
  136.87094827439722,283.49672935375605,"a",
  90.15185732397798,259.24446408155615,"a",
  36.36555737904088,250.66623660523737,"a",
  39.40505038035173,300.0108348742592,"a",
  77.27383944210476,285.7392324080291,"a",
  59.7492348312979,236.86981217824967,"a",
  64.91426091010405,236.69976633847932,"a",
  68.37663247903703,242.4761881642704,"a",
  126.4690427605926,213.3350077231246,"a",
  74.71200285478247,272.94269134511353,"a",
  82.3504428915846,279.55944297713734,"a",
  65.01616301911821,263.04065937416675,"a",
  76.63704281734134,278.9607641813739,"a",
  52.64423489444051,255.7876259117614,"a",
  51.05946794062268,248.33966403019537,"a",
  94.38942563222929,209.12164035547784,"a",
  72.09816318847982,250.91687547782576,"a",
  109.59541918790947,240.17462520808476,"a",
  47.72313318163738,317.3966377583639,"a",
  56.6772146034092,270.8647263322313,"a",
  99.92599595285458,243.06297000122106,"a",
  42.19574762070645,278.7874536890299,"a",
  67.99912437121672,311.1880069865059,"a",
  69.08242843195251,254.1114575869067,"a",
  102.51805890287619,256.9816686397197,"a",
  63.892632635607214,226.79300963869872,"a",
  75.47877118132268,290.0144524722431,"a",
  79.9395309770688,241.82764604071502,"a",
  95.60255030766857,238.39867151121405,"a",
  106.76734963326436,268.90839432064627,"a",
  53.17243517327489,252.24186849372578,"a",
  76.082404147505,277.8415820329587,"a",
  85.45986986994762,247.13104212870644,"a",
  68.50677252693772,282.4431961939779,"a",
  78.70665004796936,235.89890061009413,"a",
  80.6116844768753,219.53024522271176,"a",
  90.06552989798436,264.2999080155013,"a",
  75.38903182316434,213.89611222976902,"a",
  101.67108865301492,286.86217688745,"a",
  61.4127936968341,230.99681525401996,"a",
  48.551198510459564,256.14242042650653,"a",
  74.03667928650538,227.5781589826115,"a",
  85.8789606849331,211.22834347726996,"a",
  86.3306078782798,283.1272431464863,"a",
  124.0602189051351,288.86729854580346,"a",
  85.2291891761235,236.39343683280367,"a",
  102.24075259333588,220.3478962054421,"a",
  43.55355723008417,242.48840178659532,"a",
  95.21743194637061,239.19278981292217,"a",
  55.75251229678217,227.46190438084034,"a",
  68.01557084345637,238.73151652329835,"a",
  71.50190972994515,214.65519844257727,"a",
  53.19407285254624,254.34770605246567,"a",
  100.75867303491333,280.1616273651575,"a",
  74.13523428899973,210.94804848954277,"a",
  37.8835822692229,255.9238099770232,"a",
  65.665238197453,238.71015416820887,"a",
  48.14808996732272,238.85106345840353,"a",
  59.614115591451906,270.2909888739093,"a",
  84.00303401075321,268.89539644280705,"a",
  24.17462131116755,184.1190150283985,"a",
  26.78064818224798,181.20492184131945,"a",
  82.1027295506243,256.4988616276522,"a",
  33.35841616685002,181.41123555037387,"a",
  62.0088413547233,310.68636385684255,"a",
  54.88625303665539,196.46037730035732,"a",
  18.85446169439794,252.31382476675918,"a",
  28.44608380003671,253.3465030765037,"a",
  95.16160493003994,267.70976559259566,"a",
  32.401904921253426,283.7841676463004,"a",
  65.05090589817391,240.5023736468146,"a",
  51.715342169146936,266.6539559617088,"a",
  74.5567814232201,237.176767883097,"a",
  74.44050137018756,250.46970583141407,"a",
  69.32484285838837,263.22032980259473,"a",
  58.3854934319049,248.64377503311488,"a",
  46.31709222244264,275.7035780652487,"a",
  69.77031684147917,177.06779996273843,"a",
  4.833204245670238,302.36656652573663,"a",
  76.48218352792995,273.96296404497673,"a",
  77.81516513316338,283.2217479473481,"a",
  81.52044756294438,251.29277103020655,"a",
  45.17025644626434,235.88237961665885,"a",
  114.44071675137357,243.12859059612896,"a",
  40.45584107880197,259.1356820214074,"a",
  56.401804529788365,240.09854149533612,"a",
  40.14294732645038,275.7734117841336,"a",
  123.24526995328625,213.86021669526986,"a",
  79.07345106419146,191.01511747647203,"a",
  111.65358245829145,242.21083503034959,"a",
  112.1232067046368,240.06540964955184,"a",
  70.2962724681486,255.34500898489316,"a",
  67.72483429233581,222.0926031121955,"a",
  47.450318893909014,192.17727259009422,"a",
  123.15369954323862,184.3581666166021,"a",
  85.07401351955477,237.02642783276457,"a",
  64.02809152654005,239.11130896413908,"a",
  69.64356309984629,241.2652091189911,"a",
  75.47949948566675,224.50377476668785,"a",
  76.67555161791387,278.89316549056025,"a",
  59.98451443485301,235.85292406050536,"a",
  95.05698498861852,240.52590049881093,"a",
  75.05772619701797,243.02761059737082,"a",
  113.6801950238912,236.52880165817032,"a",
  117.36971257167173,231.400620640603,"a",
  77.95757863082356,227.20770598480834,"a",
  57.53387250251671,241.145699239331,"a",
  91.09530986759623,229.75224580095602,"a",
  53.62804098254722,291.88580447625395,"a",
  85.52331173631599,307.63041235023275,"a",
  84.79785626374388,200.37725917123709,"a",
  80.79342528167999,278.5172071299795,"a",
  64.12470864505083,236.81741195867198,"a",
  
].each_slice(3)

pp input = data.filter { |x| x[2] == "a" }.map { |x| [x[0], x[1]] }
novelty_point = [700, 285]
pp input
pp predict = input + [novelty_point]

# for noutlier
ranges = Ml::Service::Isolation::Noutlier.min_max(input)
# ranges = input[0].length.times.map { |dim| adjusted_box(input, dim) }
novelty_service = Ml::Service::Isolation::Noutlier.new(
  batch_size: 20,
  max_depth: 5,
  ranges: ranges
)

pp "staert"
forest = Ml::Forest::Tree.new(input, trees_count: 1, forest_helper: novelty_service)
pp "end"

pred_input = predict.map do |point|
  forest.fit_predict(point, forest_helper: novelty_service)
end

#ranges = novelty_service.ranges

input_regular = predict.zip(pred_input).filter { |_coord, score| !score.novelty? }.map { |x| x[0] }
input_novelty = predict.zip(pred_input).filter { |_coord, score| score.novelty? }.map { |x| x[0] }

depths_for_tree = Enumerator.new do |y|
  deep_depths(ranges, forest.trees[0]) { |x| y << x }
end

tree_nodes = Enumerator.new do |y|
  tree_nodes(forest.trees[0]) { |x| y << x }
end

nodes = tree_nodes.map { |node| [node["borders"], { label: label_pretty_print(node) }] }

pp "nodes"
pp tree_nodes.to_a
# Create a new graph
save_graph(create_graph(nodes, depths_for_tree), "figures/example6_noutlier_tree.svg")

Gnuplot.open do |gp|
  s = Enumerator.new do |y|
    rectangles_coords(forest.trees[0]) { |x| y << x }
  end

  pp "toto jsou ranges"
  pp ranges
  r = prepare_lines(ranges, forest)
  pp "rect coords s"

  s = s.filter { |obj| !obj["borders"].empty? }
  plot_regular = input_regular
  plot_novelty = input_novelty


  plot(gp, "../../figures/example6_noutlier_gnu.svg", [predict.transpose[0].min,800], predict.transpose[1].minmax, key="right") do |plot|
  # plot(gp, "../../figures/example6_noutlier_gnu.svg", [100.0, 500], [0.0, 150]) do |plot|
    set_rects(plot, s.to_a)
    plot.data << lines_init(prepare_for_lines_plot(r[0]),
                            prepare_for_lines_plot(r[1]))
    set_labels(plot, ["Px"], [novelty_point[0][0] - 1.5], [novelty_point[0][1] - 2.5], "Bold")
    plot.data << points_init(*plot_regular.transpose, "regular", "1", "black") # regular
    plot.data << points_init(*plot_novelty.transpose, "anomaly", "2", "blue") # novelty
    # set_labels(plot, %w[Px B], [15 - 1, 7], [2.5 + 0.1, 7], style = "Bold")
    # set_labels(plot, labels, label_xs, label_ys)
  end
end
